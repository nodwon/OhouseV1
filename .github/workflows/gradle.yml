# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD

on:
  push:
    branches:
      - master
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.yml
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
      - run: cat ./src/main/resources/application.yml

#      ## gradle caching
#      - name: Gradle Caching
#        uses: actions/cache@v2
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-

      # jdk
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## docker build & push to production
      - name: Docker 이미지 빌드 및 푸시 master
        run: |
          sudo service docker start
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t nodwon/ohouse:latest  .
          docker push nodwon/ohouse:latest

  deploy:
    needs: build
    runs-on: aws-ec2

    steps:
    - name: Deploy to prod
      run: |
        docker pull nodwon/ohouse:latest
        docker rm -f ohouse-container
        docker run -d -p 8080:8080 --name ohouse-container nodwon/ohouse:latest

