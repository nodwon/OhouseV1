# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.yml
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
      - run: cat ./src/main/resources/application.yml

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # jdk
      - name: Set up Java 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          java-package: jdk
          distribution: zulu
      - name: Set execute permission on gradlew
        run: chmod +x gradlew

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Docker Compose 설정
        run: docker-compose --version
        shell: bash

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker build -t ohouse .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker tag ohouse ${{ secrets.DOCKER_USERNAME }}/ohouse:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ohouse:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH 클라이언트 설정
        run: sudo apt-get install -y openssh-client

      - name: EC2로 파일 복사
        run: |
          scp -o StrictHostKeyChecking=no -r .env docker-compose.yml ${{ secrets.DOCKER_COMPOSE_PATH }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_IP }}:~/

      - name: EC2로 SSH 접속 및 배포
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_IP }} 'cd ~ && docker-compose up -d'