# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.yml
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
      - run: cat ./src/main/resources/application.yml

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # jdk
      - name: Set up Java 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          java-package: jdk
          distribution: zulu

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew clean bootJar

      # 3. Docker 이미지 빌드
      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .

      # 4. DockerHub 로그인
      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정
  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: Docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

      # 2. 기존의 컨테이너를 중지시킵니다
      - name: Docker stop container
        run: sudo docker stop github-actions-demo 2>/dev/null || true

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: Docker run new container
        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

      # 4. 미사용 이미지를 정리합니다
      - name: Delete old docker image
        run: sudo docker system prune -f
